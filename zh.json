{
  '{0}' found at index {1}: "'{0}' found at index {1}",
(*ANY) makes it so that any unicode newline character or sequence thereof counts as a line break.: "(*ANY)令任意Unicode换行字符和组合均被视为一次换行。",
(*ANYCRLF) makes it so that either a carriage return character or a line feed character, or the two in sequence are considered a line break.: "(*ANYCRLF)令回车、换行符或两者连续，三种情况均视为一次换行。",
(*CR) makes it so that only a carriage return character is considered a line break.: "在(*CR)作用下，只有回车符会被视为一次换行。",
(*CRLF) makes it so that only a carriage return character followed by a line feed character is considered a line break. Common in Windows documents.: "在(*CRLF)作用下，只有回车符后接换行符，才会被视为一次换行。常见于Windows文档。",
(*FAIL) or (*F) is a synonym for (?!), and it allows you to force a matching failure at a specific point in the regex.: "类似于(?!)，(*FAIL)或(*F)让正则匹配到该位置时判断为失败。",
(*LF) makes it so that only a line feed character is considered a line break. Common in UNIX documents.: "在(*LF)作用下，只有换行符会被视为一次换行。常见于UNIX文档。",
(*LIMIT_MATCH=x) where x is the number of times the regex engine is allowed to call match(). This user set limit cannot be increased past the compile time value or the default, however it can be restricted.: "(*LIMIT_MATCH=x)中的x代表正则引擎总共可进行的match次数。只可向下限制，而无法以此超过编译时间或默认上限。",
(*LIMIT_RECURSION=d) at the start of a pattern will limit the regex engine to 'd' number of recursions when matching. This user set limit cannot be increased past the compile time value or the default, however it can be restricted.: "在表达式开头使用(*LIMIT_RECURSION=d)，可将递归次数限制在d以内。只可向下限制，而无法以此超过编译时间或默认上限。",
(*MARK:NAME) or (*:NAME) is used to track how a match was arrived at. Name is always required, but it doesn't need to be unique. When used in conjunction with the /K modifier, pcretest can return the mark together with a successful match.: "(*MARK:NAME)或(*:NAME)被用于标记匹配过程。必须赋名，名称不必是唯一的。和/K联用时，正则测试器将随有效匹配一起返回这些标记。",
(*PRUNE) or (*PRUNE:NAME) will cause the regex to exit if it tries to backtrack past its position. This is useful when looking to cut down on backtracking at specific points in the regex. The example above would normally match both terms but due to (*PRUNE) the second alternative is not acted on.: "当正则引擎从(*PRUNE)或(*PRUNE:NAME)处进行回溯，匹配将终止。可用于想在回溯到某点时进行切断。例子中本应匹配双方，但因为有(*PRUNE)，就不会回溯并进行后一个分支的匹配了。",
(*SKIP) or (*SKIP:NAME) will cause the regex to give up on the current match if it tries to backtrack past its position. This is useful when looking to cut down on backtracking at specific points in the regex.: "当该(*SKIP)或(*SKIP:NAME)处被回溯，放弃本次匹配。",
(*THEN) or (*THEN:NAME) allows one to cut down on backtracking within an alternation. It won't allow regex to backtrack past its position, and it will give up matching the current alternation.: "当该(*THEN)或(*THEN:NAME)处被回溯，不继续匹配当前分支。",
(except for line terminators): "(except for line terminators)",
{1} ― Matches between {2} and {3} times, {4} {5}: "{1} ― 匹配 {2} 至 {3} 次",
{1} ― Matches exactly {2} {3} {4}: "{1} ― 实际匹配 {2} {3} {4}",
{1} Alternative: "{1} 选择",
{1} and {2} are also available with the use of '{3}': "{1} and {2} are also available with the use of '{3}'",
{1} Capturing Group: "{1} 捕获组",
{1} checks whether the {2} capturing group matched when it was last attempted: "{1} checks whether the {2} capturing group matched when it was last attempted",
{1} checks whether the {2} subroutine matches: "{1} checks whether the {2} subroutine matches",
{1} checks whether the whole pattern matches: "{1} checks whether the whole pattern matches",
{1} match: "{1} 次匹配",
{1} matches: "{1} 次匹配",
{1} modifier:: "{1} modifier:",
{1} step: "{1} 步",
{1} steps: "{1} 步",
{1} unit test: "{1} unit test",
{1} upvotes, {2} downvotes ({3}% like it): "{1} upvotes, {2} downvotes ({3}% like it)",
{1}, matches any position: "{1}, matches any position",
{1}. A {2} followed by a letter with no special meaning is faulted: "{1}. A {2} followed by a letter with no special meaning is faulted",
{1}. A dot won't match {2}: "{1}. A dot won't match {2}",
{1}. All matches (don't return after first match): "{1}. All matches (don't return after first match)",
{1}. Case insensitive match (ignores case of {2}): "{1}. Case insensitive match (ignores case of {2})",
{1}. Case sensitive match: "{1}. Case sensitive match",
{1}. Causes {2} and {3} to match begin/end of string: "{1}. Causes {2} and {3} to match begin/end of string",
{1}. Causes {2} and {3} to match the begin/end of each line (not only begin/end of string): "{1}. Causes {2} and {3} to match the begin/end of each line (not only begin/end of string)",
{1}. Dot matches newline characters: "{1}. Dot matches newline characters",
{1}. Enable all unicode features and interpret all unicode escape sequences as such: "{1}. Enable all unicode features and interpret all unicode escape sequences as such",
{1}. Force the a dollar sign, {2}, to always match end of the string, instead of end of the line. This option is ignored if the {3}-flag is set: "{1}. Force the a dollar sign, {2}, to always match end of the string, instead of end of the line. This option is ignored if the {3}-flag is set",
{1}. Force the escape sequences {2}, {3}, {4}, {5}, {6}, {7}, {8} and {9} to perform ASCII-only matching instead of full Unicode matching: "{1}. Force the escape sequences {2}, {3}, {4}, {5}, {6}, {7}, {8} and {9} to perform ASCII-only matching instead of full Unicode matching",
{1}. Force the pattern to only match consecutive matches from where the previous match ended.: "{1}. Force the pattern to only match consecutive matches from where the previous match ended.",
{1}. Make {2}, {3}, {4}, {5}, {6}, {7}, {8} and {9} perform matching with Unicode semantic (redundant in Python 3): "{1}. Make {2}, {3}, {4}, {5}, {6}, {7}, {8} and {9} perform matching with Unicode semantic (redundant in Python 3)",
{1}. Pattern is forced to {2}: "{1}. Pattern is forced to {2}",
{1}. Pattern strings are treated as {2}. Also causes escape sequences to match unicode characters: "{1}. Pattern strings are treated as {2}. Also causes escape sequences to match unicode characters",
{1}. Spaces and text after a {2} in the pattern are ignored: "{1}. Spaces and text after a {2} in the pattern are ignored",
{1}. The match becomes greedy by default: "{1}. The match becomes greedy by default",
{1}. The match becomes lazy by default. Now a {2} following a quantifier makes it greedy: "{1}. The match becomes lazy by default. Now a {2} following a quantifier makes it greedy",
{1}. Whitespaces and {2} in the pattern are treated literally: "{1}. Whitespaces and {2} in the pattern are treated literally",
`(?R1)` checks if a call to capture group 1 was made, which will return false the first time it is encountered because the regex engine is simply parsing capture group one.: "`(?R1)`将检查分组1是否成功捕获。一开始正则引擎正在分析捕获组1，故返回false()，匹配竖线后子表达式。",
^ and $ match start/end of line: "多行模式，此模式下^和$可以分别匹配行首和行尾",
$ matches only end of pattern: "$字符仅匹配目标字符串的结尾；没有此选项时，如果最后一个字符是换行符的话$字符也能匹配。",
3 or more of a: "三个a以上",
A case insensitive match is performed, meaning capital letters will be matched by non-capital letters and vice versa.: "大小写字母的表达式将相互匹配。",
A character except: a, b or c: "非a或b或c的字符",
A character in the range: a-z: "在a到z范围内的小写英语字母字符",
A character in the range: a-z or A-Z: "在a到z或A到Z范围内的大小写英语字母字符",
A character not in the range: a-z: "在a到z范围外的字符",
a line: "a line",
A lookbehind assertion has to be fixed width: "A lookbehind assertion has to be fixed width",
A named subpattern may not have a name which length exceeds 32 characters: "A named subpattern may not have a name which length exceeds 32 characters",
A posix character class may only appear inside a character class: "A posix character class may only appear inside a character class",
A quantifier inside a lookbehind makes it non-fixed width: "A quantifier inside a lookbehind makes it non-fixed width",
A repeated capturing group will only capture the last iteration. Put a capturing group around the repeated group to capture all iterations or use a non-capturing group instead if you're not interested in the data: "循环捕获组只捕获最后一次匹配。在循环捕获组外层加一个括号以获取所有结果，或使用非捕获组如果你对捕获数据不感兴趣的话。",
a single character in the range between {1} {2} and {3} {4} ({5}): "单字符在{1} {2} 至 {3} {4} 区间",
A single character of: a, b or c: "单个a或b或c字符",
A subpattern name must be alpha numeric and may not begin with a digit: "A subpattern name must be alpha numeric and may not begin with a digit",
A subpattern name must be unique: "A subpattern name must be unique",
A word boundary: "w字符边界",
Absolute end of string: "文本最末尾",
Account: "Account",
Account data: "Account data",
Account Page: "Account Page",
acts like {1}, except that if the pattern is unanchored, the bumpalong advance is not to the next character, but to the position in the subject where {2} was encountered: "acts like {1}, except that if the pattern is unanchored, the bumpalong advance is not to the next character, but to the position in the subject where {2} was encountered",
Add: "Add",
Add bold text: "Add bold text",
Add bulleted list: "Add bulleted list",
Add header: "Add header",
Add italic text: "Add italic text",
Add numbered list: "Add numbered list",
Add tag: "Add tag",
Add to favorites: "Add to favorites",
All settings to control the application are located here.: "All settings to control the application are located here.",
All the errors detected are listed below, from left to right, as they appear in the pattern.: "All the errors detected are listed below, from left to right, as they appear in the pattern.",
All Tokens: "全部",
Allow duplicate subpattern names: "允许子模式重复命名，如：(?<name>N1)(?<name>N2)",
Allow others to edit permalink: "Allow others to edit permalink",
Allows regex to match unicode characters via dotall and unicode escape sequences, as well as ES6 unicode code point escapes such as \u{1D306}.: "让正则引擎可通过Unicode、ES6等转义办法匹配Unicode字符。",
Alternative (acts like boolean OR): "Alternative (acts like boolean OR)",
Always collapse left sidebar: "Always collapse left sidebar",
Always collapse right sidebar: "Always collapse right sidebar",
An alternate way to match alphabet letters. Equivalent to [A-Za-z]. [[:alpha:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配英文字母，类似[A-Za-z]。必须位于字符类标记内。",
An alternate way to match any letter or digit. Equivalent to [A-Za-z0-9]. [[:alnum:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配数字和英文字母，类似[A-Za-z0-9]。必须位于字符类标记内。",
An alternator at this position effectively truncates the entire pattern, rendering any other tokens beyond this point useless: "An alternator at this position effectively truncates the entire pattern, rendering any other tokens beyond this point useless",
An alternator at this position effectively truncates the group, rendering any other tokens beyond this point useless: "An alternator at this position effectively truncates the group, rendering any other tokens beyond this point useless",
An empty alternative effectively makes this group optional which suggests the alternative is completely redundant: "An empty alternative effectively makes this group optional which suggests the alternative is completely redundant",
An end quote token encountered before a start quote token: "An end quote token encountered before a start quote token",
An explanation of your regex will be automatically generated as you type.: "你输入的正则表达式解释会自动生成。",
An unescaped delimiter must be escaped with a backslash (\): "An unescaped delimiter must be escaped with a backslash (\)",
Anchor: "锚定模式",
Anchor to start of pattern: "强制仅从目标字符串的开头开始匹配",
Anchors: "锚点",
anonymous: "anonymous",
Any character following a \ that is not a valid meta sequence will be faulted and raise an error. For example, escaping a (.) meta character will cause an error, and it will not match.: "在\后衔接任何不能形成有效元字符的内容（例如\.），都将被视为错误，不予匹配。",
Any characters between \Q and \E, including metacharacters, will be treated as literals.: "\Q和\E直接的字符，其中的元字符将失去正则功能，仅作为文本进行匹配。",
Any digit: "阿拉伯数字字符",
Any non-digit: "非阿拉伯数字字符",
Any non-whitespace character: "非空白字符",
Any non-word character: "非字母、数字或下划线的字符",
Any single character: "任意单个字符",
Any subpatterns in (...) in such a group share the same number.: "该组内所有子表达式共享同一个组序号。",
Any text appearing in this group is ignored in the regex. Another option is enabling the x flag to allow #comments. This flag will also cause regex to ignore spaces.: "该组内文字不视为表达式内容。也能用/x标记来允许#备注，该标记亦将排除空白字符。",
Any Unicode sequences, linebreaks included: "含换行符在内的Unicode字符",
Any whitespace character: "任意空白字符",
Any word can be used as a tag: "Any word can be used as a tag",
Any word character: "字母、数字或下划线的字符",
Are you sure you want to delete this regex?: "Are you sure you want to delete this regex?",
Are you sure you want to delete this regex? This action is non-reversible and will delete all versions of this regex.: "Are you sure you want to delete this regex? This action is non-reversible and will delete all versions of this regex.",
as few times as possible, expanding as needed: "尽可能少匹配，如果有必要，回溯匹配更多内容",
as many times as possible, giving back as needed: "尽可能多匹配，如果有必要，回溯匹配更少内容",
as many times as possible, without giving back: "尽可能多匹配，不回溯",
ASCII codes 0-127: "ASCII编码0-127号字符",
ASCII control characters: "ASCII control characters",
assert position at a word boundary {1}: "assert position at a word boundary {1}",
assert position where {1} does not match: "assert position where {1} does not match",
assert that: "assert that",
Assert that the Regex below does not match: "Assert that the Regex below does not match",
Assert that the Regex below matches: "Assert that the Regex below matches",
Assertion: "Assertion",
asserts position at start of {1}: "asserts position at start of {1}",
asserts position at start of the string: "asserts position at start of the string",
asserts position at the end of a line: "asserts position at the end of a line",
asserts position at the end of the previous match or the start of the string for the first match: "asserts position at the end of the previous match or the start of the string for the first match",
asserts position at the end of the string: "asserts position at the end of the string",
asserts position at the end of the string, or before the line terminator right at the end of the string (if any): "asserts position at the end of the string, or before the line terminator right at the end of the string (if any)",
Asserts that the given subpattern can be matched here, without consuming characters: "子表达式可在此后成功匹配的位置，不占用字符。",
Atomic Group: "Atomic Group",
Atomic group (non-capturing): "固化分组(不捕获)",
Author: "Author",
Auto-complete Brackets: "Auto-complete Brackets",
Backspace character: "退格符",
Backticks can not be used in a raw string, use \x60 instead: "Backticks can not be used in a raw string, use \x60 instead",
Backtrack: "Backtrack",
Because you are not signed in this entry has not been tied to an account. It is recommended you sign in so that your entries are never lost and you can manage them from the account page whenever you like.: "Because you are not signed in this entry has not been tied to an account. It is recommended you sign in so that your entries are never lost and you can manage them from the account page whenever you like.",
Before even attempting a match, the regex engine makes some checks, such as the length of the string. If it is not long enough to fit the pattern, it will automatically return a no match. This optimization can be disabled by using this modifier.: "在开始匹配前，正则引擎会检查一些参数，如文本长度，若不足，则直接返回“无匹配结果”。本标签将禁止该功能。",
Beta Sign-in: "Beta Sign-in",
Between 3 and 6 of a: "3到6个a",
Beware that this will refresh the page and any unsaved progress will be lost!: "Beware that this will refresh the page and any unsaved progress will be lost!",
Bogus escape: this escape is not recognized in the python flavor: "Bogus escape: this escape is not recognized in the python flavor",
Branch Reset Group: "组分支",
Bug Reports & Feedback: "Bug Reports & Feedback",
Bugs or suggestions go here: "Bugs or suggestions go here",
Cancel: "Cancel",
Capture everything enclosed: "捕获封闭内容",
capture group {1}: "capture group {1}",
Capture Group {1} is {2} ... and so on: "Capture Group {1} is {2} ... and so on",
Capture Group {1} is {2} and its start/end positions can be obtained via {3} and {4}: "Capture Group {1} is {2} and its start/end positions can be obtained via {3} and {4}",
Carriage return: "回车符",
case insensitive: "不区分大小写",
Case insensitive: "不区分大小写",
Case insensitive match: "不区分大小写",
case sensitive: "区分大小写",
Catastrophic Backtracking: "回溯次数过多",
Catastrophic backtracking has been detected and the execution of your expression has been halted. To find out more what this is, please read the following article:: "Catastrophic backtracking has been detected and the execution of your expression has been halted. To find out more what this is, please read the following article:",
Category: "Category",
causes a skip to the next innermost alternative if the rest of the pattern does not match: "causes a skip to the next innermost alternative if the rest of the pattern does not match",
causes the whole match to fail outright if the rest of the pattern does not match: "causes the whole match to fail outright if the rest of the pattern does not match",
causes token to be ignored: "导致元字符被忽略",
Change delimiter: "Change delimiter",
character: "字符",
Character class missing closing bracket: "Character class missing closing bracket",
Character Classes: "字符类别",
Character range is out of order: "Character range is out of order",
characters: "字符",
Close: "Close",
Close details: "Close details",
Code Generator: "代码生成",
Collapse all tests: "Collapse all tests",
Comment: "备注",
Common Tokens: "常用",
Comparison string: "Comparison string",
Complete match contents: "完整匹配内容",
Conditional statement: "条件语句",
Consider a donation: "捐赠",
Contact: "Contact",
contains: "contains",
Contents after match: "匹配后内容",
Contents before match: "匹配前内容",
Contents in capture group `foo`: "捕获组`foo`内容",
Contents in capture group 1: "捕获组1内容",
Control: "Control",
Control character Y: "Y对应Ctrl字符",
Control characters: "控制符",
Control verb: "控制动作标记",
Copied!: "已复制",
Copy to clipboard: "复制",
Could not compile regex: "Could not compile regex",
Criteria: "Criteria",
Custom regex101 property that converts all subsequent tokens to their {1} equivalence until `\E` is encountered: "Custom regex101 property that converts all subsequent tokens to their {1} equivalence until `\E` is encountered",
Custom regex101 property that terminates any previous text transformation (initiated with either \U or \L): "Custom regex101 property that terminates any previous text transformation (initiated with either \U or \L)",
Dark: "Dark",
Data: "Data",
Debug data: "调试数据",
Decimal digits: "十进制数字",
Default flavor: "Default flavor",
Delete: "Delete",
Delete library entry: "Delete library entry",
Delete permalink: "Delete permalink",
Delete Regex: "Delete Regex",
Delimiters: "分隔符",
Description: "Description",
Description of regular expression: "Description of regular expression",
Detailed match information will be displayed here automatically.: "匹配详情会自动显示在这里。",
Disallow duplicate subpattern names: "Disallow duplicate subpattern names",
Disallow meaningless escapes: "禁止模式中的反斜线后面跟上一个没有特殊意义的字母",
Disallow others to edit permalink: "Disallow others to edit permalink",
Discussion: "Discussion",
does match: "does match",
does not match: "does not match",
Don't return after first match: "匹配全部可匹配结果",
Donate: "Donate",
Dot matches newline: "单行模式，此模式下.能匹配任意字符，包括换行符",
Due to a bug in PCRE creating ranges with an escaped literal is unsafe. To avoid this, simply use the literal representation instead.: "Due to a bug in PCRE creating ranges with an escaped literal is unsafe. To avoid this, simply use the literal representation instead.",
Duplicate group names: "重复组名模式",
Edit: "Edit",
Edit account entry: "Edit account entry",
Edit test: "Edit test",
Edit title: "Edit title",
Edit title and tags: "Edit title and tags",
Editor: "Editor",
Else match the following regex: "Else match the following regex",
empty character class ― matches {1}: "empty character class ― matches {1}",
empty string: "empty string",
Enable or disable the syntax highlighting of your regular expression in the editor.: "Enable or disable the syntax highlighting of your regular expression in the editor.",
Enable unicode support: "开启Unicode支持",
End of quoted literals: "End of quoted literals",
End of string: "文本末尾",
End of word: "单词尾",
ends with: "ends with",
Engine Error: "引擎错误",
Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters.: "定长子表达式可在此前成功匹配的位置，不占用字符。",
Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters.: "定长子表达式不可在此前成功匹配的位置，不占用字符。",
equal to {1}: "等于{1}",
equals: "equals",
Evaluate the condition below and proceed accordingly: "Evaluate the condition below and proceed accordingly",
Exactly 3 of a: "三个a",
Expand all tests: "Expand all tests",
Expected group {1} to contain `{2}` but did not: "Expected group {1} to contain `{2}` but did not",
Expected group {1} to end with `{2}` but was instead `{3}`: "Expected group {1} to end with `{2}` but was instead `{3}`",
Expected group {1} to equal `{2}` but was instead `{3}`: "Expected group {1} to equal `{2}` but was instead `{3}`",
Expected group {1} to start with `{2}` but was instead `{3}`: "Expected group {1} to start with `{2}` but was instead `{3}`",
Expected regex to match, but did not.: "Expected regex to match, but did not.",
Expected regex to not match, but did.: "Expected regex to not match, but did.",
Explanation: "解释",
Export Matches: "Export Matches",
Export Method: "Export Method",
eXtended: "扩展模式",
Favorite Regex: "Favorite Regex",
Fewest points: "Fewest points",
Filter by Flavor: "Filter by Flavor",
Flags/Modifiers: "修饰符",
Flavor: "语言风格",
Follow me on twitter!: "Follow me on twitter!",
For a full regex reference for {1}, please visit:: "完整{1}正则表达式参考，请访问：",
Fork Regex: "拷贝创建新分支",
Fork Regular Expression: "Fork Regular Expression",
Form-feed: "换页符",
full match: "完整匹配",
Full match: "完整匹配",
Full Search Result: "Full Search Result",
General: "General",
General Tokens: "一般",
Generated Code: "生成代码",
Github: "Github",
given the string: "given the string",
Global: "全局模式",
Global pattern flags: "Global pattern flags",
Google: "Google",
greedy: "贪婪模式",
Greedy quantifier: "贪婪模式",
Group: "Group",
Group {1}: "分组 {1}",
Group {1} found at {2}: "Group {1} found at {2}",
Group {1} no longer exists in the pattern or did not participate in the match: "Group {1} no longer exists in the pattern or did not participate in the match",
Group {1} was not expected to participate in the match but did anyway: "Group {1} was not expected to participate in the match but did anyway",
group {1}: {2}: "group {1}: {2}",
Group Constructs: "子组结构",
group did not participate in match: "分组没有参与匹配",
Groups with the same index must either have the same name or both be non-named groups: "Groups with the same index must either have the same name or both be non-named groups",
Headers: "Headers",
Here comes a {1} tab character.: "Here comes a {1} tab character.",
Hex character YY: "YY对应Hex字符",
Hex character YYYY: "YYYY对应Hex字符",
Hexadecimal digits: "十六进制数字",
Hexadecimal replacement values: "HEX替换值",
Highlight Syntax: "Highlight Syntax",
Horizontal whitespace character: "横向空白字符",
I recommend you launch the debugger in the menu to the left and analyze the data to find out the cause.: "I recommend you launch the debugger in the menu to the left and analyze the data to find out the cause.",
If capturing group 1 was matched so far, matches the pattern before the vertical bar. Otherwise, matches the pattern after the vertical bar. A group name, or a relative position (-1) in PCRE, can be used. Global flag breaks conditionals.: "若成功匹配分组1，则匹配竖线前的子表达式，否则匹配后者。在PCRE规则下可以被命名组或相对组(±n)作为判断条件。",
If Clause: "If Clause",
If condition is met, match the following regex: "If condition is met, match the following regex",
If recursion of the whole pattern is successful, do something | otherwise do this.: "以整个表达式匹配成功与否作为内部递归判断条件。成功则匹配前一个子表达式，否则匹配后者。",
If the lookahead succeeds, matches the pattern before the vertical bar. Otherwise, matches the pattern after the vertical bar. The lookaround can be negative. Global flag breaks conditionals.: "若顺序环视匹配成功，匹配竖线前子表达式，否则匹配后者。可以是否定型环视。“全局”标记将打破该条件结构。",
If the lookbehind succeeds, match the pattern before the vertical bar. Otherwise, matches the pattern after the vertical bar. The lookaround can be negative. Global flag, 'g', breaks conditionals.: "若逆序环视匹配成功，匹配竖线前子表达式，否则匹配后者。可以是否定型环视。“全局”标记将打破该条件结构。",
If this token is inside a capturing group, only that capturing group is ended successfully at that particular location, while the parent pattern continues to execute.: "当它出现在捕获组内，则组内捕获至该处为止，其余表达式继续匹配。",
If you want to use this regex and data in your own experiments, click the `Fork Regex` button below instead.: "If you want to use this regex and data in your own experiments, click the `Fork Regex` button below instead.",
Ignore whitespace: "忽略空白字符，可以多行书写，并使用#进行注释说明",
In the example below, the first alternate matched "a", and the second one matched "bc", however once it bumped into "X" none of the alternatives resulted in a match. Therefore the engine cannot return the next "a" as a match because "X" is not the last location where a match occurred.: "范例中，相邻的a和bc分别被匹配，但因有X相隔，下一个a及其后内容不被匹配。",
In this case `(?(R&sub1)...|...)` checks if a call to `sub1` has been made. The first time the recursive conditional is parsed, the engine is in the process of matching what `sub1` requires, but it isn't because of a callback to `sub1`.: "该情况下“(?(R&sub1)...|...)”降检查“sub1”组是否被创建。首次解析时，引擎正在匹配“sub1”的条件，却因对自身的递归而返回“否”。",
Include non-participating groups in match result: "Include non-participating groups in match result",
include the latest version of the regex crate in your Cargo.toml: "include the latest version of the regex crate in your Cargo.toml",
Incomplete group structure: "Incomplete group structure",
Inline modifiers: "内标记",
Insert a carriage return character.: "Insert a carriage return character.",
Insert a form-feed character.: "插入一个换页符。",
Insert a newline character.: "Insert a newline character.",
Insert a personal title: "Insert a personal title",
Insert a tab character.: "Insert a tab character.",
Insert code snippet: "Insert code snippet",
insert comparison string: "insert comparison string",
Insert link: "Insert link",
Insert quote: "Insert quote",
insert test description: "insert test description",
insert test string: "insert test string",
insert your regular expression here: "在此输入你的正则表达式",
insert your replacement value here: "在此输入你的替换文本（$1 表示引用正则表达式第一个子模式）",
insert your test string here: "在此输入你的测试字符串文本",
Internal engine error: {1}: "Internal engine error: {1}",
Invalid control character: "Invalid control character",
Invalid unicode escape: "Invalid unicode escape",
is null: "is null",
Keep in mind that Python 3 is going to treat your whole script as unicode by default, therefore using this flag would be redundant. See the "a" flag to limit matches to ASCII characters only. Python 2 requires this flag to turn on unicode support.: "Python 3默认视被匹配文本编码为Unicode，只有默认为ASCII编码的Python 2需要使用此修饰符。",
Language: "Language",
lazy: "懒惰模式",
Lazy quantifier: "懒惰模式",
Letters: "字母",
Letters and digits: "字母与数字",
Library entries: "Library entries",
Library Entry: "Library Entry",
Light: "Light",
Like regex101? Support it by donating!: "Like regex101? Support it by donating!",
Line break modifier: "换行模式标记",
Line terminator(s) are {1} {2}: "Line terminator(s) are {1} {2}",
Lines are delimited by {1} {2}: "Lines are delimited by {1} {2}",
Link to regular expression: "Link to regular expression",
Live Help (IRC, opens new window): "国外在线帮助IRC",
Loading...: "Loading...",
Lookahead conditional: "顺序环视条件语句",
Lookbehind conditional: "逆序环视条件语句",
lowercase: "lowercase",
Lowercase letters: "小写字母",
Lowercase Transformation: "Lowercase Transformation",
Make escape sequences perform ASCII-only matching: "转义系列仅执行ASCII匹配",
Make permalink private: "Make permalink private",
Make permalink public: "Make permalink public",
Make quantifiers lazy: "使量词默认为非贪婪模式",
Make regex perform ASCII-only matching instead of full Unicode matching. Applies to [a-z] ranges and escape sequences.: "令正则引擎只匹配ASCII字符（而不是所有Unicode字符），影响[a-z]等范围元字符和转义组合。",
Makes any character literal: "按文本形式处理字符",
marker verb whose main purpose is to track how a match was arrived at: "marker verb whose main purpose is to track how a match was arrived at",
Match: "匹配",
Match {1}: "Match {1}",
Match {1} failed in {2} step(s): "Match {1} failed in {2} step(s)",
Match {1} found in {2} step(s): "Match {1} found in {2} step(s)",
Match {1} halted after {2} step(s): "Match {1} halted after {2} step(s)",
Match {1} was found at {2}: "Match {1} was found at {2}",
Match a single character not present in the list below: "匹配不在下列列表中的一个单字符",
Match a single character not present in the set: "匹配不在集合中的一个单字符",
Match a single character present in the list below: "匹配下列列表中的一个单字符",
Match a single character present in the set: "匹配集合中的一个单字符",
match any non-word character in any script (equal to {1}): "match any non-word character in any script (equal to {1})",
match any word character in any script (equal to {1}): "match any word character in any script (equal to {1})",
Match either a or b: "匹配a或b",
Match Information: "匹配信息",
Match nth relative previous subpattern: "匹配向前第n个子表达式的捕获结果",
Match nth relative upcoming subpattern: "递归匹配向后第n个子表达式的捕获结果",
Match nth subpattern: "匹配第n个子表达式/分组的捕获结果",
Match one data unit: "匹配一个数据单元",
Match previously-named capture group `name`: "匹配此前被命名为`name`子表达式的捕获结果",
Match subpattern `name`: "匹配'name'子表达式的捕获结果",
Match the first capture group following the current position in the expression. (?+2) is the second one, (?-1) is before current position.: "递归引用此位置后的第1个已捕获子表达式。(?+2)引用后面第2个，(?-1)引用前1个。",
match the remainder of the pattern with the following effective flags: {1}: "match the remainder of the pattern with the following effective flags: {1}",
Match was found at {1}: "Match was found at {1}",
Match with full unicode: "模式字符串被当成UTF-8",
Match without capturing everything enclosed: "Match without capturing everything enclosed",
matches a alphabetic character {1}: "匹配一个字母 {1}",
matches a alphanumeric character {1}: "匹配一个字母或数字 {1}",
matches a alphanumeric character or {1} {2} (also written as {3}): "匹配一个字母或数字或 {1} {2}（也写成 {3}）",
matches a backspace character {1}: "matches a backspace character {1}",
matches a carriage return {1}: "matches a carriage return {1}",
Matches a carriage return character, unicode character 2185.: "匹配一个回车符，即Unicode第2185号字符。",
matches a character intended to be combined with another character (e.g. accents, umlauts, enclosing boxes, etc.): "matches a character intended to be combined with another character (e.g. accents, umlauts, enclosing boxes, etc.)",
matches a character intended to be combined with another character that takes up extra space (vowel signs in many Eastern languages): "matches a character intended to be combined with another character that takes up extra space (vowel signs in many Eastern languages)",
matches a character intended to be combined with another character without taking up extra space (e.g. accents, umlauts, etc.): "matches a character intended to be combined with another character without taking up extra space (e.g. accents, umlauts, etc.)",
matches a character that encloses the character is is combined with (circle, square, keycap, etc.): "matches a character that encloses the character is is combined with (circle, square, keycap, etc.)",
matches a character with {1} value {2} through {3}: "从 {2} 至 {3} 中匹配一个字符 {1}",
matches a combining character (mark) as a full character on its own: "matches a combining character (mark) as a full character on its own",
matches a control character {1}: "匹配一个控制字符 {1}",
matches a digit (equal to {1}): "matches a digit (equal to {1})",
matches a digit {1} (also written as {2}): "匹配一个数字 {1}（也写成 {2}）",
matches a digit zero through nine in any script except ideographic scripts: "matches a digit zero through nine in any script except ideographic scripts",
matches a digit zero through nine in any script except ideographic scripts (equal to {1}): "matches a digit zero through nine in any script except ideographic scripts (equal to {1})",
matches a form-feed character {1}: "matches a form-feed character {1}",
matches a hexadecimal digit {1}: "匹配一个十六进制数值 {1}",
matches a letter or ideograph that does not have lowercase and uppercase variants: "matches a letter or ideograph that does not have lowercase and uppercase variants",
matches a letter that appears at the start of a word when only the first letter of the word is capitalized: "matches a letter that appears at the start of a word when only the first letter of the word is capitalized",
matches a letter that exists in lowercase and uppercase variants (combination of {1}, {2} and {3}): "matches a letter that exists in lowercase and uppercase variants (combination of {1}, {2} and {3})",
matches a line separator character {1}: "matches a line separator character {1}",
matches a line-feed (newline) character {1}: "matches a line-feed (newline) character {1}",
matches a lowercase letter {1}: "匹配一个小写字母 {1}",
matches a lowercase letter that has an uppercase variant: "matches a lowercase letter that has an uppercase variant",
Matches a newline character: "匹配一个换行符 。",
Matches a null character, most often visually represented in unicode using U+2400.: "匹配一个空字符，在视觉上一般代指Unicode 2400号字符。",
matches a number that looks like a letter, such as a Roman numeral: "matches a number that looks like a letter, such as a Roman numeral",
matches a paragraph separator character {1}: "matches a paragraph separator character {1}",
matches a punctuation character {1}: "匹配一个标点符号",
matches a punctuation character such as an underscore that connects words: "matches a punctuation character such as an underscore that connects words",
matches a single character in the list {1} {2}: "从列表 {1} {2} 中匹配一个单字符",
matches a special character that is used like a letter: "matches a special character that is used like a letter",
matches a superscript or subscript digit, or a number that is not a digit (excluding numbers from ideographic scripts): "matches a superscript or subscript digit, or a number that is not a digit (excluding numbers from ideographic scripts)",
matches a tab character {1}: "matches a tab character {1}",
Matches a tab character. Historically, tab stops happen every 8 characters.: "匹配一个制表符。惯例上每个制表空位等于8个半角字符。",
Matches a unicode character that doesn't have any of the given properties.: "匹配不含该属性的Unicode字符。",
Matches a unicode character with the given group of properties or categories:: "匹配对应组别的Unicode字符，参考：",
Matches a unicode character with the given property:: "匹配属性含后续字母的Unicode字符，参考：",
Matches a unicode character without the given property.: "匹配不含该后续字母的属性的Unicode字符。",
matches a uppercase letter {1}: "匹配一个大写字母 {1}",
matches a vertical tab character: "matches a vertical tab character",
matches a visible character {1}: "匹配一个可见字符 {1}",
matches a visible character or the space character {1}: "匹配一个可见字符或空格符",
matches a whitespace character that is invisible, but does take up space: "matches a whitespace character that is invisible, but does take up space",
matches a whitespace character, including a line break {1}: "matches a whitespace character, including a line break {1}",
matches a whitespace character, including a line break {1} (also written as {2}): "匹配一个空白字符，包含换行 {1}（也写成 {2}）",
Matches an `a` character or nothing.: "匹配零或一个"a"字符。",
matches an ASCII {1} or Latin-1 {2} control character: "matches an ASCII {1} or Latin-1 {2} control character",
matches an uppercase letter that has a lowercase variant: "matches an uppercase letter that has a lowercase variant",
matches any character {1}: "matches any character {1}",
Matches any character except for an a, b or c: "匹配除a、b和c以外的任意字符。",
Matches any character in the valid ASCII range. Equivalent to [-]. [[:ascii:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配有效ASCII字符，类似[-]。必须位于字符类标记内。",
Matches any character other than newline (or including newline with the /s flag): "匹配换行符外的字符（多行模式下也匹配换行符）。",
Matches any character that is not horizontal whitespace (\H).: "匹配除空格和制表符以外的字符。",
matches any character that's not a horizontal whitespace character: "matches any character that's not a horizontal whitespace character",
matches any character that\'s not a digit (equal to {1}): "matches any character that\'s not a digit (equal to {1})",
matches any character that\'s not a vertical whitespace character: "matches any character that\'s not a vertical whitespace character",
matches any character, including newline: "matches any character, including newline",
matches any character, including unicode {1}: "matches any character, including unicode {1}",
Matches any characters between a and z, including a and z.: "匹配a与z之间的字符，包括a和z。",
Matches any characters between a-z or A-Z. You can combine as much as you please.: "匹配a到z及A到Z以内字符，可继续增加定义其它字符范围。",
Matches any characters except those in the range a-z.: "匹配不在a到z范围内的任意字符。",
matches any characters in the {1} script: "matches any characters in the {1} script",
matches any characters that {1} does not: "matches any characters that {1} does not",
matches any code point reserved for private use: "matches any code point reserved for private use",
matches any code point to which no character has been assigned: "matches any code point to which no character has been assigned",
matches any currency sign: "matches any currency sign",
Matches any decimal digit. Equivalent to [0-9].: "匹配十进制数字字符，等价于[0-9]。",
matches any horizontal whitespace character (equal to {1}): "matches any horizontal whitespace character (equal to {1})",
matches any kind of closing bracket: "matches any kind of closing bracket",
matches any kind of closing quote: "matches any kind of closing quote",
matches any kind of hyphen or dash: "matches any kind of hyphen or dash",
matches any kind of invisible character (equal to {1}): "matches any kind of invisible character (equal to {1})",
matches any kind of letter from any language: "matches any kind of letter from any language",
matches any kind of numeric character in any script: "matches any kind of numeric character in any script",
matches any kind of opening bracket: "matches any kind of opening bracket",
matches any kind of opening quote: "matches any kind of opening quote",
matches any kind of punctuation character: "matches any kind of punctuation character",
matches any kind of punctuation character that is not a dash, bracket, quote or connector: "matches any kind of punctuation character that is not a dash, bracket, quote or connector",
matches any kind of visible character (equal to {1}): "matches any kind of visible character (equal to {1})",
matches any kind of whitespace or invisible separator: "matches any kind of whitespace or invisible separator",
Matches any letter, digit or underscore. Equivalent to [a-zA-Z0-9_].: "匹配英文字母、数字或下划线，等价于[a-zA-Z0-9_]。",
matches any math symbols, currency signs, dingbats, box-drawing characters, etc: "matches any math symbols, currency signs, dingbats, box-drawing characters, etc",
matches any mathematical symbol: "matches any mathematical symbol",
matches any non-newline character: "matches any non-newline character",
matches any non-numeric character in any script (equal to {1}): "matches any non-numeric character in any script (equal to {1})",
matches any non-whitespace character (equal to {1}): "matches any non-whitespace character (equal to {1})",
matches any non-word character (equal to {1}): "matches any non-word character (equal to {1})",
matches any number of Unicode characters that form an extended Unicode sequence: "matches any number of Unicode characters that form an extended Unicode sequence",
Matches any space, tab or newline character.: "匹配空格、制表符和换行符等空白字符。",
Matches any Unicode newline character: <CR>, <LF>;, <CR><LF>. Equivalent to [\r\n].: "匹配Unicode下的换行符：<CR>（等价于\r），<LF>（等价于\n）。",
matches any Unicode newline sequence; can be modified using verbs: "matches any Unicode newline sequence; can be modified using verbs",
Matches any valid Unicode sequence, including line breaks.: "匹配换行符在内的所有合法Unicode字符。",
matches any vertical whitespace character: "matches any vertical whitespace character",
matches any whitespace character (equal to {1}): "matches any whitespace character (equal to {1})",
matches any word character (equal to {1}): "matches any word character (equal to {1})",
Matches anything not matched by  (newlines and vertical tabs): "匹配除换行符和纵向制表符以外的字符。",
Matches anything other than a decimal digit.: "匹配除0到9以外的字符，等价于[^0-9]。",
Matches anything other than a letter, digit or underscore.: "匹配除非字母、数字或下划线以外的字符，等价于[^a-zA-Z0-9_]。",
Matches anything other than a space, tab or newline.: "匹配除空格、制表符和换行符以外的字符。",
Matches as few characters as possible.: "仅匹配最少量的必要相符内容。",
Matches as many characters as possible; backtracking can't reduce the number of characters matched. Because it is greedy, it will match all the way to the last digit, leaving nothing else for the {1} to match. Without backtracking, this regex fails to produce a match.: "尽可能多地匹配相符内容，并禁止随后的匹配项进行回溯匹配。范例中，d++匹配占用了所有数字，没为.留下任何可匹配字符，故整条匹配式匹配失败。",
Matches as many characters as possible.: "尽可能多地匹配相符内容。",
Matches ASCII characters typically associated with Control+A through Control+Z: \x01 through \x1A.: "匹配ASCII码中对应Ctrl+A到Ctrl+Z的字符，等于\x01到\x1A。",
Matches at least 3 consecutive `a` characters.: "匹配三个以上连续的"a"字符。",
Matches between 3 and 6 (inclusive) consecutive `a` characters.: "匹配三到六个连续的"a"字符。",
Matches characters that are not whitespace, letters or numbers. [[:punct:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配空白字符、字母和数字以外的字符。必须位于字符类标记内。",
Matches characters that are often used to control text presentation, including newlines, null characters, tabs and the escape character. Equivalent to [\x00-\x1F\x7F]. [[:cntrl:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配控制文本表达的符号，包括换行符、空白字符、制表符及转义字符，类似[-]。必须位于字符类标记内。",
Matches decimal digits. Equivalent to [0-9]. [[:digit:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配十进制阿拉伯数字字符，类似[0-9]。必须位于字符类标记内。",
Matches either an a, b or c character: "匹配为a、b或c的字符。",
matches esc {1}: "matches esc {1}",
Matches exactly 3 consecutive `a` characters.: "匹配三个连续的"a"字符。",
Matches exactly one data unit of input. Can match individual bytes in UTF-8 mode, leading to undefined behaviour if a search starts inside a character.: "匹配输入单元。在UTF-8模式下可能匹配单个字节，在字符内开始检索时导致“未定义行为”。",
Matches hexadecimal digits, case insensitive. Equivalent to [0-9a-fA-F].: "匹配十六进制阿拉伯数字字符，类似[0-9a-fA-F]。",
matches invisible control characters and unused code points: "matches invisible control characters and unused code points",
matches invisible formatting indicator: "matches invisible formatting indicator",
Matches letters, numbers and underscores. Equivalent to \w or [a-zA-Z0-9_]. [[:word:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配数字、英文字母和下划线，类似[A-Za-z0-9_]。必须位于字符类标记内。",
Matches lowercase letters. Equivalent to [a-z]. [[:lower:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配小写英文字母，类似[a-z]。必须位于字符类标记内。",
Matches newlines and vertical tabs. Works with Unicode. Vertical tabs can be inserted in some word processors using CMD/CTRL+ENTER.: "匹配换行符和纵向制表符，适用于Unicode环境。可在部分文字处理程序中用CMD/CTRL+ENTER输入。",
matches one data unit, even in UTF mode (best avoided): "matches one data unit, even in UTF mode (best avoided)",
matches one half of a surrogate pair in {1} encoding: "matches one half of a surrogate pair in {1} encoding",
Matches one or more consecutive `a` characters.: "匹配一个以上连续的"a"字符。",
Matches printable characters, part of the basic latin set, such as letters and spaces, without including control characters. [[:print:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配含字母、空白字符在内的基本拉丁字符表，但不包括控制符。必须位于字符类标记内。",
Matches printable, non-whitespace, non-control characters only. Equivalent to [!-~]. [[:graph:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配非空白字符、非控制字符的可印刷符号，类似[!-~]。必须位于字符类标记内。",
Matches spaces and horizontal tabs. Works with Unicode. Equivalent to [	s].: "匹配空格和制表符，不匹配换行符，通用于Unicode环境。",
Matches spaces and tabs (but not newlines). Equivalent to [ ]. [[:blank:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配空格和制表符，类似[ ]。必须位于字符类标记内。",
matches the {1} {2} literally {3}: "按字面匹配 {1} {2}",
Matches the 16-bit character with the given hex value.: "匹配给出Hex值对应的十六位字符。",
Matches the 8-bit character with the given hex value.: "匹配给出Hex值对应的八位字符。",
Matches the 8-bit character with the given octal value.: "匹配给出Oct值对应的八位字符。",
Matches the a or the b part of the subexpression.: "匹配子表达式中的a或b分支。分支数不限。",
Matches the backspace control character.: "匹配退格符。",
matches the bell character {1}: "matches the bell character {1}",
Matches the capture group called "name". Capture group has to be named before \g is called. This is an alternative notation for \g'name' or \g{name}: "匹配组名为"name"的子表达式成功捕获的相同文本，该命名必须在被\g引用前完成。\g'name'或\g{name}的另一种写法。",
Matches the capture group called "name". Capture group has to be named before \g is called. This is an alternative notation for \g'name' or \g<name>. Note that you cannot use curly brackets (?{name}a+) to name a capture group in PCRE: "匹配组名为"name"的子表达式成功捕获的相同文本，该命名必须在被\g引用前完成。\g'name'或\g<name>的另一种写法。注意，在PCRE正则里不能用(?{name}a+)的方式命名捕获组。",
Matches the capture group called `name`. Capture group has to be named before \g is called.: "匹配组名为`name`的子表达式成功捕获的相同文本，该命名必须在被\g引用前完成。",
matches the character {1} with index {2} ({3} or {4}) literally ({5}): "匹配字符 {1} 基于 {2} ({3} or {4}) ",
matches the control sequence {1} {2}: "matches the control sequence {1} {2}",
Matches the end of a string only. Unlike $, this is not affected by multiline mode, and, in contrast to \Z, will not match before a trailing newline at the end of a string.: "仅匹配文本末尾的位置（不占用字符），不受多行模式和分页符\Z影响。",
Matches the end of a string only. Unlike $, this is not affected by multiline mode.: "匹配文本末尾的位置（不占用字符），不受多行模式影响。",
Matches the end of a string without consuming any characters. If multiline mode is used, this will also match immediately before a newline character.: "匹配文本末尾的位置（不占用字符）。多行模式下亦匹配换行符前的位置，即行尾。",
Matches the longest possible substring in the group and doesn't allow later backtracking to reevaluate the group. It is not a capturing group.: "占用相应匹配内容，禁止随后的匹配项进行回溯匹配。非捕获组。",
matches the negation of {1}: "匹配不是{1}",
matches the same text as most recently matched by the {1} capturing group: "matches the same text as most recently matched by the {1} capturing group",
matches the same text as most recently matched by the capturing group named {1}: "matches the same text as most recently matched by the capturing group named {1}",
matches the same text as most recently matched by the entire pattern: "matches the same text as most recently matched by the entire pattern",
Matches the start of a string only. Unlike ^, this is not affected by multiline mode.: "匹配文本开头的位置（不占用字符），不受多行模式影响。",
Matches the start of a string without consuming any characters. If multiline mode is used, this will also match immediately after a newline character.: "匹配文本开头的位置（不占用字符）。多行模式下亦匹配换行符后的位置，即行首。",
Matches the text captured by the nth group. n can contain more than one digit, if necessary. This may be useful in order to avoid ambiguity with octal characters.: "匹配第n个子表达式成功捕获的相同文本，n可多于1位。能避免和Oct字符混淆。",
Matches the text captured by the nth group. n can contain more than one digit, if necessary. This may be useful in order to avoid ambiguity with octal characters. This is an alternate syntax for \gn. It can be useful in a situation where a literal number needs to be matched immediately after a \g{n} in the regex.: "匹配第n个子表达式成功捕获的相同文本，n可多于1位。能避免和Oct字符混淆。\gn的另一种写法，可用于需在\g{n}后立刻匹配指定数字的情况。",
Matches the text matched by a previously named capture group.: "后向引用，匹配此前'name'子表达式成功捕获的相同文本。",
Matches the text matched by a previously named capture group. This is the python specific notation.: "递归引用对应名字的已捕获子表达式。Python专用。",
Matches the unicode character with the given hex value.: "Matches the unicode character with the given hex value.",
Matches uppercase letters. Equivalent to [A-Z]. [[:upper:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配大写英文字母，类似[A-Z]。必须位于字符类标记内。",
matches various symbols that are not math symbols, currency signs, or combining characters: "matches various symbols that are not math symbols, currency signs, or combining characters",
Matches whitespace characters. Equivalent to \s. [[:space:]] is a POSIX notation and it needs to be inside a [character class] notation.: "POSIX下匹配空白字符，类似\s。必须位于字符类标记内。",
Matches zero or more consecutive `a` characters.: "匹配零个以上连续的"a"字符。",
Matches, without consuming any characters, at the position between two characters matched by \w.: "匹配两个\w字符（英文字母、数字和下划线）之间的位置（不占用字符）。",
Matches, without consuming any characters, immediately between a character matched by \w and a character not matched by \w (in either order). It cannot be used to separate non words from words.: "匹配一边是\w字符（英文字母、数字和下划线），另一边不是\w字符的位置（不占用字符）。",
Max Execution Time: "Max Execution Time",
May only be used to define functions. No matching is done in this group.: "May only be used to define functions. No matching is done in this group.",
meaningless quantifier: "没意义的量词",
Meta Sequences: "元字符序列",
Most points: "Most points",
Most recent: "Most recent",
Move down: "Move down",
Move up: "Move up",
Multiline: "多行模式",
My Expressions: "My Expressions",
My Favorites: "My Favorites",
My History: "My History",
My Library Entries: "My Library Entries",
My Regular Expressions: "My Regular Expressions",
Name or other identifier of the author: "Name or other identifier of the author",
Named Capture Group {1}: "Named Capture Group {1}",
Named capture groups can be called via {1}: "Named capture groups can be called via {1}",
Named Capturing Group: "命名捕获组",
Negation of \h: "\h的反集",
Negation of \p: "\p的反集",
Negation of \pX: "\pX的反集",
Negation of \v - anything except newlines and vertical tabs: "非纵向空白字符的字符",
Negative Lookahead: "否定型顺序环视",
Negative Lookbehind: "否定型逆序环视",
Newline: "换行符",
no description available: "no description available",
No hex code was specified: "No hex code was specified",
No Internet Connection: "No Internet Connection",
No Match: "无匹配",
No match groups were extracted.: "No match groups were extracted.",
Non-capturing group: "Non-capturing group",
Non-capturing Group. Matches the regex below with the following effective flags: {1}: "Non-capturing Group. Matches the regex below with the following effective flags: {1}",
Non-word boundary: "非w字符边界",
Note: for Python 2.7 compatibility, use ur{1}{2} to prefix the regex and u"" to prefix the test string and substitution.: "Note: for Python 2.7 compatibility, use ur{1}{2} to prefix the regex and u"" to prefix the test string and substitution.",
Nothing to preview: "Nothing to preview",
Null character: "空字符",
Octal character ddd: "ddd对应Oct字符",
Octal Character Table: "Octal Character Table",
Oh no!: "Oh no!",
Ok: "Ok",
Once `(?1)` is called, `(?(R1)true|false)` will return true since capture group 1 was called, and will match `ction`: "当以`(?1)`进行调用，因分组1已捕获，`(?(R1)true|false)`判断返回true，匹配竖线前子表达式。",
Once we actually call `sub1` the conditional will return true, at which point `ction` matches.: "当后面正式引用“sub1”时将返回“是”，从而匹配“ction”。",
one: "1",
One or more of a: "一个a以上",
Open regex in editor: "Open regex in editor",
Order By: "Order By",
Parts of the regex enclosed in parentheses may be referred to later in the expression or extracted from the results of a successful match.: "将该部分从母表达式封闭成子表达式并分组，留待后续引用，在整式成功匹配后另行捕获。",
Pattern Error: "正则表达式错误",
Pattern may not end with a trailing backslash: "Pattern may not end with a trailing backslash",
Pattern modifier: "编码模式标记",
Pattern strings will be treated as UTF-16, which means that unicode characters will also be included in [a-z] ranges, and in escape sequences.: "将字符串编码视为UTF-16，unicode字符将被包含到[a-z]等范围及转义内。",
Plain Text: "Plain Text",
Please enable JavaScript to use this web application.: "Please enable JavaScript to use this web application.",
Please keep in mind that these code samples are automatically generated and are not guaranteed to work. If you find any syntax errors, feel free to submit a bug report.: "请记住这里的代码是自动生成的，并不保证一定可以。如果你发现语法错误，你可以随意提交一个bug报告。",
Please note this feature is experimental in JavaScript and might not be supported by your browser.: "Please note this feature is experimental in JavaScript and might not be supported by your browser.",
Please sign in by clicking the button in the left sidebar. By signing in, all your expressions will be automatically saved to your account and tracked. This allows you to delete, modify, organize and restrict them as you see fit whenever you want.: "Please sign in by clicking the button in the left sidebar. By signing in, all your expressions will be automatically saved to your account and tracked. This allows you to delete, modify, organize and restrict them as you see fit whenever you want.",
Please upgrade your browser and come back.: "Please upgrade your browser and come back.",
Please wait while the app is loading...: "Please wait while the app is loading...",
Please wait while your expression is being debugged...: "Please wait while your expression is being debugged...",
Please wait while your request is being processed.: "Please wait while your request is being processed.",
pos: {1}-{2}: "pos: {1}-{2}",
Positive Lookahead: "肯定型顺序环视",
Positive Lookbehind: "肯定型逆序环视",
possessive: "占用模式",
Possessive quantifier: "侵占模式",
Pre-define patterns before using them: "预定义表达式",
Press {1} to copy: "Press {1} to copy",
Preview: "Preview",
Print the match result: "Print the match result",
Print the result of the substitution: "Print the result of the substitution",
Proceed matching from where previous match ended only: "仅匹配上次匹配结束位置开始的匹配，1 匹配1121中前面两个1",
Processing...: "匹配中...",
Quantifier: "量词",
Quantifier range is too large: "Quantifier range is too large",
Quantifiers: "重复",
Quick Reference: "快速参考",
Quote; treat as literals: "引用，视为纯文本进行匹配",
Quoted Literals: "Quoted Literals",
Quoted Literals: match the string enclosed in the quote literally: "Quoted Literals: match the string enclosed in the quote literally",
Recurse entire pattern: "递归表达式",
Recurse first relative subpattern: "递归引用后1个子表达式",
Recurse first subpattern: "递归第1个子表达式",
Recurse nth relative upcoming subpattern: "递归匹配向后第n个子表达式的捕获结果",
Recurse subpattern `name`: "递归“name”子表达式",
Recurses nth capture group ahead of the current position of \g'+n'. \g'+2' is the second capture group after \g.: "递归匹配\g'+n'后面第n个子表达式的捕获结果。\g'+2'对应\g后第二个子表达式。",
Recurses nth capture group ahead of the current position of \g<+n>. \g<+2> is the second capture group after \g.: "递归匹配\g<+n>后面第n个子表达式的捕获结果。\g<+2>对应\g后第二个子表达式，依次类推。",
Recurses nth capture group prior to the current position of \g{-n}. \g{-1} would be the last capture group before \g. \g{-2} would be the capture group before the last, and so on.: "匹配\g{-n}前面第n个子表达式的捕获结果。\g{-1}对应\g前一个，\g{-2}对应再上一个，如此类推。",
Recurses nth capture group. n can contain more than one digit, if necessary. Alternate syntax for \g{n}: "匹配第n个子表达式成功捕获的相同文本，n可多于1位。\g{n}的另一种写法。",
Recurses nth capture group. n can contain more than one digit, if necessary. Alternate syntax for \g<n>: "匹配第n个子表达式成功捕获的相同文本，n可多于1位。\g{n}的另一种写法。",
recurses the {1} subpattern: "recurses the {1} subpattern",
recurses the entire pattern: "recurses the entire pattern",
recurses the subpattern named {1}: "recurses the subpattern named {1}",
Recursive Conditional statement: "递归条件语句",
Recursively match the entire expression. (?0) and \g<0> are synonymous. This is useful for balanced tags.: "递归引用整个表达式，等价于(?0)和\g<0>。可用于标签的配对匹配。",
Recursively match the first capture group.: "递归引用第1个已捕获子表达式。",
Recursively matches the given named capture group. Python supports (?P=named_group), but 'named group' has to be previously defined.: "递归引用对应名字的已捕获子表达式。Python支持(?P=named_group)的形式，但必须先定义“named group”。",
Recursively matches the given named subpattern or capture group.: "递归引用对应名字，已或未捕获的子表达式。",
regex: "regex",
Regex Debugger: "正则执行步骤",
Regex Editor: "正则编辑器",
Regex engine modifier: "正则引擎模式标记",
Regex Flags: "正则模式修正符",
Regex Library: "正则库",
Regex Versions: "正则版本",
Regex will continue parsing the string keeping in mind the last match location. If the next match is not located directly after the last, this next match is discarded.: "从上次匹配成功的下个位置开始后续匹配。若下个相符内容不紧接在后，则不继续匹配。",
Regex101 only supports inline modifiers to be placed at the start of the regex for python (which is also best practice): "Regex101 only supports inline modifiers to be placed at the start of the regex for python (which is also best practice)",
Regular Expression: "正则表达式",
Relevance: "Relevance",
Remember that you can also delete this regex from the account page at any time.: "Remember that you can also delete this regex from the account page at any time.",
Remove from favorites: "Remove from favorites",
Reset match: "重置捕获起点",
resets the starting point of the reported match. Any previously consumed characters are no longer included in the final match: "resets the starting point of the reported match. Any previously consumed characters are no longer included in the final match",
Restrict matches to ASCII only: "仅匹配ASCII",
result will be a String with the substituted value: "result will be a String with the substituted value",
result will be a tuple containing the start and end indices for the first match in the string: "result will be a tuple containing the start and end indices for the first match in the string",
result will be an iterator over tuples containing the start and end indices for each match in the string: "result will be an iterator over tuples containing the start and end indices for each match in the string",
Run test: "Run test",
Run tests: "Run tests",
Save: "Save",
Save & Share: "保存与分享",
Save Regex: "保存正则表达式",
Save Regular Expression: "Save Regular Expression",
Saved regex: "Saved regex",
Saved settings: "Saved settings",
Search library: "Search library",
Search reference: "搜索",
Select Regex Version: "Select Regex Version",
Select the flavor you want to use when the site loads. Note: a saved entries' flavor overwrites this.: "Select the flavor you want to use when the site loads. Note: a saved entries' flavor overwrites this.",
Send me an email: "Send me an email",
Set Regex Options: "Set Regex Options",
Sets the given position in the regex as the new "start" of the match. This means that nothing preceding the K will be captured in the overall match.: "将正则表达式中指定的位置设为新的捕获起点。在\K之前的匹配内容将不会被捕获。",
sets the property mode to {1}: "sets the property mode to {1}",
sets the property mode to Unicode: "sets the property mode to Unicode",
Settings: "配置",
shorthand for {1}: "shorthand for {1}",
Show informative and helpful tooltips when hovering tokens in the regex editor: "Show informative and helpful tooltips when hovering tokens in the regex editor",
Show Line Numbers in Regex Editor: "Show Line Numbers in Regex Editor",
Show Line Numbers in Test String Editor and Substitution Result: "Show Line Numbers in Test String Editor and Substitution Result",
Show Sidebar: "Show Sidebar",
Show tooltips: "Show tooltips",
Show Whitespace: "Show Whitespace",
Sign In: "Sign In",
Sign in with one of the providers below: "Sign in with one of the providers below",
Sign out: "Sign out",
Signing in allows you to add favorites as well as manage, make private, and delete your expressions.: "Signing in allows you to add favorites as well as manage, make private, and delete your expressions.",
Single line: "单行模式",
Space or tab only: "空格或制表符",
specifies a newline convention: {1}, {2} or {3}: "specifies a newline convention: {1}, {2} or {3}",
specifies a newline convention: {1}, {2} or {3} only: "specifies a newline convention: {1}, {2} or {3} only",
specifies a newline convention: {1}, followed by {2}: "specifies a newline convention: {1}, followed by {2}",
specifies a newline convention: all unicode newline sequences {1}: "specifies a newline convention: all unicode newline sequences {1}",
specifies a newline convention: any Unicode newline sequence: "specifies a newline convention: any Unicode newline sequence",
specifies a newline convention: carriage return: "specifies a newline convention: carriage return",
specifies a newline convention: line-feed: "specifies a newline convention: line-feed",
Start of match: "匹配检索开始的位置",
Start of string: "文本开头",
Start of word: "单词首",
Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters.: "子表达式不可在此后成功匹配的位置，不占用字符。",
starts with: "starts with",
step: "step",
steps: "步",
Sticky - searches in strings only from the index of the last match: "粘连模式",
Style: "Style",
Styling with Markdown is supported: "Styling with Markdown is supported",
Submit: "Submit",
Submit to Regex Library: "Submit to Regex Library",
Submitted by: "Submitted by",
Submitting entry, please wait.: "Submitting entry, please wait.",
Subpattern definition construct: "Subpattern definition construct",
Subpatterns declared within each alternative of this construct will start over from the same index: "Subpatterns declared within each alternative of this construct will start over from the same index",
Substitution: "替换",
Substitution result: "替换结果",
suppresses the start-of-match optimizations that are otherwise run by Perl: "suppresses the start-of-match optimizations that are otherwise run by Perl",
Surrogates are disallowed: "Surrogates are disallowed",
Switch to Test Area: "Switch to Test Area",
Switch to Unit Tests {1}: "Switch to Unit Tests {1}",
Tab: "制表符",
Tags: "Tags",
Target: "Target",
Tells the engine not to stop after the first match has been found, but rather to continue until no more matches can be found.: "让正则引擎在没有可匹配项剩余之前保持检索。",
Terminate any Transformation: "Terminate any Transformation",
Terminates any of the previous \U or \L transformations. This is a feature only available on regex101.com.: "Terminates any of the previous \U or \L transformations. This is a feature only available on regex101.com.",
Test passed: "Test passed",
Test String: "测试文本",
The `Fork Regex` button will create a copy of this document, but one that you may modify, without altering this entry.: "The `Fork Regex` button will create a copy of this document, but one that you may modify, without altering this entry.",
The ^ and $ anchors now match at the beginning/end of each line respectively, instead of beginning/end of the entire string.: "^和$不仅匹配整个字符串的始末，还将匹配每行的开头与末尾。",
the above tag defines encoding for this document and is for Python 2.x compatibility: "the above tag defines encoding for this document and is for Python 2.x compatibility",
The assertion determines how you want to validate the target.: "The assertion determines how you want to validate the target.",
The character offset is too large: "The character offset is too large",
The condition is invalid (you may be referencing a non-existent subpattern or group): "The condition is invalid (you may be referencing a non-existent subpattern or group)",
The DEFINE group is completely ignored by regex. It gets treated as a var name="value", whereas you can recall the specific pattern for use via its name. Multiple patterns can be defined in the same DEFINE group.: "DEFINE(定义)组内容不会进行匹配，而是为特定组名定义对应的子表达式，供随后调用。可在一个定义组内定义多条子表达式。",
The engine will per default do lazy matching, instead of greedy. This means that a ? following a quantifier instead makes it greedy.: "默认进行懒惰匹配。量词后接?将使之变为贪婪匹配。",
The entry has automatically been added to your account which means you can at any time delete this entry, make it private and much much more.: "The entry has automatically been added to your account which means you can at any time delete this entry, make it private and much much more.",
The escape sequence to match backspace is not supported in the selected flavor: "The escape sequence to match backspace is not supported in the selected flavor",
The match was halted because the offset does not point to the beginning of a valid UTF-16 character.: "The match was halted because the offset does not point to the beginning of a valid UTF-16 character.",
The owner of this permalink has locked it and as such, nobody but the creator may edit it.: "The owner of this permalink has locked it and as such, nobody but the creator may edit it.",
The pattern is forced to become anchored, equal to a ^.: "表达式被强制锚定，相当于在式子开头加上^。",
The PCRE regex engine automatically applies some internal optimizations to regexes to avoid unnecessary backtracking. This modifier will disable that behavior, and thus the engine will backtrack until the previously matching instruction fails to do so.: "PCRE的正则引擎会自动进行内部优化，避免不必要的回溯，而本标记将禁止该功能，让引擎回溯到上一个匹配指令失败为止。",
The posix class is unknown/invalid: "The posix class is unknown/invalid",
The preceding token is not quantifiable: "The preceding token is not quantifiable",
The quantifier range is out of order: "The quantifier range is out of order",
The range is invalid because either the left or right token is erroneous: "The range is invalid because either the left or right token is erroneous",
The range is invalid because the rightmost token is not rangeable: "The range is invalid because the rightmost token is not rangeable",
The regex debugger returned no data for the input you provided.: "The regex debugger returned no data for the input you provided.",
The regex debugger was unable to debug your pattern due to an error.: "The regex debugger was unable to debug your pattern due to an error.",
The regex did not match the subject string.: "The regex did not match the subject string.",
The result can be accessed through the `m`-variable.: "The result can be accessed through the `m`-variable.",
The result of the substitution is: "The result of the substitution is",
the string: "the string",
The substituted value will be contained in the result variable: "The substituted value will be contained in the result variable",
The target specifies what it is you want to test. This determines in turn which assertions are possible: "The target specifies what it is you want to test. This determines in turn which assertions are possible",
The token is incomplete: "The token is incomplete",
The value specified is too large: "The value specified is too large",
Theme: "Theme",
There are no unit tests yet; add some!: "There are no unit tests yet; add some!",
There are too many alternatives within the parent structure: "There are too many alternatives within the parent structure",
There does not seem to be anything here: "There does not seem to be anything here",
There is no need to save these urls as they are stored on your account and can be found on the account page. You may at any time delete or modify your library entry from there.: "There is no need to save these urls as they are stored on your account and can be found on the account page. You may at any time delete or modify your library entry from there.",
There was a problem trying to fetch the library data. Please try again later.: "There was a problem trying to fetch the library data. Please try again later.",
There was a problem when trying to fetch the details for this entry. Please try again later.: "There was a problem when trying to fetch the details for this entry. Please try again later.",
There was a problem while trying to submit your regex to the library. Please try again later.: "There was a problem while trying to submit your regex to the library. Please try again later.",
There was an error trying to save your regex. Please try again later.: "There was an error trying to save your regex. Please try again later.",
There was an error while fetching your account data. Please try again later.: "There was an error while fetching your account data. Please try again later.",
These enable setting regex flags within the expression itself. You can also unset flags using a minus sign: (?-i): "为随后的表达式部分应用模式标记。用减号（如(?-i)）则可去除相应标记。",
They are automatically saved as you change them and will be automatically loaded every time.: "They are automatically saved as you change them and will be automatically loaded every time.",
This allows regex to accept duplicate pattern names, however each capture group still has its own ID. Thus the two capture groups produce their own match instead of a single combined one.: "捕获的子表达式可使用相同组名，但仍被分配独立的ID号。",
This allows regex to treat the string as UTF-16, specifically.: "令正则引擎视文本编码为16位UTF。",
This allows regex to treat the string as UTF-32, specifically.: "令正则引擎视文本编码为32位UTF。",
This allows regex to treat the string as UTF-8, specifically.: "令正则引擎视文本编码为8位UTF。",
This allows regex to treat the string as UTF, be it 8, 16, or 32.: "令正则引擎视文本编码为8/16/32位UTF。",
This capturing group can be referred to using the given name instead of a number.: "This capturing group can be referred to using the given name instead of a number.",
This capturing group can be referred to using the given name instead of a number. Alternative notation for (?'name'...) and (?P<name>...).: "该捕获组将可以设定的名称被引用。(?'name'...)的另一种写法。",
This capturing group can be referred to using the given name instead of a number. Alternative notation for (?<name>...) and (?'name'...) when using a PCRE flavor.: "该捕获组将可以设定的名称被引用。PCRE规则下的另一个可用写法。",
This capturing group can be referred to using the given name instead of a number. Alternative notation for (?<name>...) and (?P<name>...).: "该捕获组将可以设定的名称被引用。",
This causes the regex to end successfully, skipping the rest of the pattern.: "匹配至此后判断为成功并结束，跳过剩余的表达式。",
This construct is similar to (...), but won't create a capture group.: "和(...)类似，但不予分组或捕获。",
This enables the dot (.) metacharacter to also match new lines. The string could be visualised as a single line input.: "将字符串视为单一行，元字符(.)可匹配换行符。",
This flag does not exist in Python2, as by default your script is parsed in ascii mode. In Python3 this will behave as described.: "Python 2不支持本修饰符，默认为ASCII。",
This flag tells the engine to ignore all whitespace and allow for comments in the regex. Comments are indicated by a starting "#"-character. If you need to include a space character in your regex, it must now be escaped '\ '.: "让正则引擎忽略所有空白字符并允许以#添加备注。若要在表达式中包含空白字符，必须以'\ '进行转义。",
This group does not allow any backtracking to occur: "This group does not allow any backtracking to occur",
This is an alternate syntax for \k<name> or \k'name' and it is valid for .NET. Note that you cannot use curly brackets (?{name}a+) to name a capture group in PCRE: "\k<name>或\k'name'外的另一种写法，适用于.NET环境。注意，在PCRE正则里不能用(?{name}a+)的方式命名捕获组。",
This is an alternate syntax for \k<name> or \k{name}.: "\k<name>或\k{name}外的另一种写法。",
This is necessary to avoid infinite loops with zero-width matches: "This is necessary to avoid infinite loops with zero-width matches",
This is to avoid confusion for anyone else viewing this permalink and to not corrupt the authors work.: "This is to avoid confusion for anyone else viewing this permalink and to not corrupt the authors work.",
This link will only be presented to you once! Save it if you want to be able to delete your regex in the future.: "This link will only be presented to you once! Save it if you want to be able to delete your regex in the future.",
This may be used to match the literal value of any metacharacter, or the / delimiter.: "匹配时按文本形式来识别其后的任何元字符或/分隔符。",
This means that your pattern did match but there were no capturing groups that matched anything in the subject string.: "This means that your pattern did match but there were no capturing groups that matched anything in the subject string.",
This metacharacter matches any unicode newline character or sequence thereof. Its behavior can be controlled by (*UTF) pattern modifiers. In (*UTF8) mode, '\R' will match the line separator, paragraph separator, carriage return, carriage return & newline sequence, line feed, vertical tab, form feed, and next line. When outside (*UTF8) mode, line and paragraph separators are not matched. Newline conventions can also be specified via (*BSR_ANYCRLF) and (*BSR_UNICODE): "匹配所有Unicode换行字符和组合。其受Unicode编码模式标记影响，在(*UTF8)下，可匹配行分隔符、段分隔符、回车、回车+换行符组合、换页符、纵向制表符等。没有(*UTF8)，则行、页分隔符不被匹配。此外，(*BSR_ANYCRLF)和(*BSR_UNICODE)亦会影响其匹配行为。",
This POSIX equivalent of the "\b" word boundary is interpreted as: "POSIX下类似于"\b"的词汇后分界，更具体地阐释为",
This POSIX equivalent of the `\\b` word boundary is interpreted as {1}: "POSIX下类似于`\\b`的词汇前分界，更具体地阐释为",
This script is unknown/invalid: "This script is unknown/invalid",
This sets the convention for newline matching to '\r\n','\r', or '\n' for things like the '\R' metacharacter.: "令回车、换行符或两者连续，三种情况均能被“\R”这类元字符匹配。",
This sets the convention for newline matching to any unicode newline character or sequence thereof, for things like the '\R' metacharacter.: "令任意Unicode换行字符和组合均能被“\R”这类元字符匹配。",
This setting adjusts the site-wide theme.: "This setting adjusts the site-wide theme.",
This setting affects how long the matcher will try to match your regex before it decides to give up.: "This setting affects how long the matcher will try to match your regex before it decides to give up.",
This setting determines whether groups in your regex, which did not match anything in the subject string, should be included in the results or not.: "This setting determines whether groups in your regex, which did not match anything in the subject string, should be included in the results or not.",
This token can not be used in a lookbehind as it makes it non-fixed width: "This token can not be used in a lookbehind as it makes it non-fixed width",
This token does nothing without a corresponding open quote tag (\Q). If you meant to match a literal `E`, remove the backslash: "This token does nothing without a corresponding open quote tag (\Q). If you meant to match a literal `E`, remove the backslash",
This token has no special meaning and has thus been rendered erroneous: "This token has no special meaning and has thus been rendered erroneous",
This token is not supported in the selected flavor: "This token is not supported in the selected flavor",
This token must be escaped when the `u` flag is enabled unless they form a valid quantifier: "This token must be escaped when the `u` flag is enabled unless they form a valid quantifier",
This token references a non-existent or invalid subpattern: "This token references a non-existent or invalid subpattern",
this verb causes the match to end successfully, skipping the remainder of the pattern: "this verb causes the match to end successfully, skipping the remainder of the pattern",
this verb causes the match to fail at the current starting position in the subject if the rest of the pattern does not match: "this verb causes the match to fail at the current starting position in the subject if the rest of the pattern does not match",
this verb disables the internal `auto-possessification` optimization in PCRE: "this verb disables the internal `auto-possessification` optimization in PCRE",
This verb does not allow regex to continue parsing after a matching failure, even if there are other matching strings ahead, and regardless of how many successful matches are before the failure.: "一旦匹配失败，该标记将终止整个匹配流程，即使之后仍有可成功匹配的文本。",
This verb is unknown or invalid: "This verb is unknown or invalid",
This verb must be placed at the start of the regex: "This verb must be placed at the start of the regex",
this verb sets the match limit (max iterations) for the pattern: "this verb sets the match limit (max iterations) for the pattern",
this verb sets the recursion limit (max depth) for the pattern: "this verb sets the recursion limit (max depth) for the pattern",
This will match only at the starting point of the search or the position the previous successful match ended. Useful with the /g flag, or when you are only trying to match after a certain point in a string.: "匹配开始检索或上次成功匹配结束的位置。可配合/g或匹配文本特定位置后的文本时使用。",
This will return a portion of the source string that follows the match.: "返回被匹配字符串后的字符串内容。",
This will return a portion of the source string that precedes the match.: "返回被匹配字符串前的字符串内容。",
This will return a string with the complete match result from the regex.: "返回主表达式匹配捕获的字符串内容。",
This will return a string with the contents from the capture group named `foo`. Any name can be used as long as it is defined in the regex. If the J-flag is specified, content will be taken from the first capture group with the same name.: "返回被命名为foo的捕获组的字符串内容。若使用了修饰符J，将引用首个同名捕获组的内容。",
This will return a string with the contents from the capture group named `foo`. Any name can be used as long as it is defined in the regex. This syntax is made up and specific to only Regex101. If the J-flag is specified, content will be taken from the first capture group with the same name.: "返回被命名为foo的捕获组的字符串内容。若使用了修饰符J，将引用首个同名捕获组的内容。Regex101特有语法。",
This will return a string with the contents from the first capture group. The number, in this case 1, can be any number as long as it corresponds to a valid capture group.: "返回首个捕获组的字符串内容。只要能对应有效的捕获组，组号码大小不限。",
time: "次",
Timeout: "超时（可在配置中调整超时时间）",
times: "次",
Title: "Title",
Title of regular expression: "Title of regular expression",
Tools: "工具",
Transforms text to lowercase until either end of string or a \E is encountered. This is a feature only available on regex101.com.: "Transforms text to lowercase until either end of string or a \E is encountered. This is a feature only available on regex101.com.",
Transforms text to uppercase until either end of string or a \E is encountered. This is a feature only available on regex101.com.: "Transforms text to uppercase until either end of string or a \E is encountered. This is a feature only available on regex101.com.",
Twitter: "Twitter",
UCP (Unicode Character Properties) allows regex to treat the string as unicode, which means that \d and \w are extended to match other unicode characters than [0-9] and [a-zA-Z0-9_].: "令正则引擎视文本编码为Unicode，\d和\w将匹配更多的Unicode相关字符，而不限于[0-9]和[a-zA-Z0-9_]。",
Unable to fetch versions: "Unable to fetch versions",
Undescribed specific verb; No description for it yet (nothing's perfect): "Undescribed specific verb; No description for it yet (nothing's perfect)",
Unfavorite Regex: "Unfavorite Regex",
Unfortunately it seems your browser does not meed the criteria to properly render and utilize this website.: "Unfortunately it seems your browser does not meed the criteria to properly render and utilize this website.",
Ungreedy: "懒惰模式",
Unicode: "Unicode模式",
Unicode Character Table: "Unicode Character Table",
Unicode newlines: "Unicode换行符",
Unicode property or script category: "对应组别的Unicode字符",
Unicode property X: "含对应字母属性的Unicode字符",
Unit Tests: "Unit Tests",
unlimited: "无穷",
Unmatched parenthesis: "Unmatched parenthesis",
Unspecified unit test: "Unspecified unit test",
Update: "Update",
Update Library Entry: "Update Library Entry",
Update Regex: "更新正则表达式",
Update Regular Expression: "Update Regular Expression",
Upload to Library: "Upload to Library",
uppercase: "uppercase",
Uppercase letters: "大写字母",
Uppercase Transformation: "Uppercase Transformation",
Usually referred to as a `backreference`, this will match a repeat of the text captured in a previous set of parentheses.: "后向引用，匹配此前子表达式成功捕获的相同文本。",
verb synonymous with {1}. Forces a matching failure at the given position in the pattern: "verb synonymous with {1}. Forces a matching failure at the given position in the pattern",
Version {1}: "Version {1}",
Vertical whitespace character: "纵向空白字符",
View Explanation: "查看解释",
View Match Information: "查看匹配信息",
View Regex Quick Reference: "查看正则表达式快速参考",
Visible characters: "可见字符",
Visible characters (not space): "可见字符(不含空白字符)",
Visible punctuation characters: "可见标点字符",
Whitespace: "空白字符",
Whole match is {1} and its start/end positions can be obtained via {2} and {3}: "Whole match is {1} and its start/end positions can be obtained via {2} and {3}",
Wiki: "Wiki",
Wiki (Info & FAQ): "Wiki (Info & FAQ)",
with no special consideration for the \r\n sequence: "with no special consideration for the \r\n sequence",
Word characters: "单词字符",
Wrap Long Lines: "Wrap Long Lines",
Write: "Write",
Yes, delete: "Yes, delete",
You can manually specify the number of replacements by changing the 4th argument: "You can manually specify the number of replacements by changing the 4th argument",
You can not create a range with a shorthand escape sequences: "You can not create a range with a shorthand escape sequences",
You can not set both the `a` and `u` flag simultaneously: "You can not set both the `a` and `u` flag simultaneously",
You can use hexadecimals to insert any character into the replacement string using the standard syntax.: "可以HEX码在替换文本中插入任意字符。",
You can't do that!: "You can't do that!",
You have made changes since you last saved, leaving the website will result in a permanent loss of the data.: "You have made changes since you last saved, leaving the website will result in a permanent loss of the data.",
You have no tags yet, add some and organize your entries!: "You have no tags yet, add some and organize your entries!",
You have not added anything to your favorites yet.: "You have not added anything to your favorites yet.",
You have not created anything yourself yet.: "You have not created anything yourself yet.",
You have not submitted anything to the library yet.: "You have not submitted anything to the library yet.",
You must be signed in to vote: "You must be signed in to vote",
You will find a link to your library entry here:: "You will find a link to your library entry here:",
Your entry has successfully been submitted to the library: "Your entry has successfully been submitted to the library",
Your expression caused an unhandled error:: "Your expression caused an unhandled error:",
Your expression took too long to finish and was terminated. Please increase the timeout and try again.: "Your expression took too long to finish and was terminated. Please increase the timeout and try again.",
Your history is empty.: "Your history is empty.",
Your pattern contains one or more errors, please see the explanation section above.: "Your pattern contains one or more errors, please see the explanation section above.",
Your regex has been permanently saved and may be accessed with this link by anybody you give it to.: "Your regex has been permanently saved and may be accessed with this link by anybody you give it to.",
Your regular expression does not match the subject string.: "你的正则表达式没有匹配目标字符串",
Your search did not match anything: "Your search did not match anything",
Your tag filtration returned no results.: "Your tag filtration returned no results.",
Your workspace has been forked into a separate entry that only you can modify, which you can find here: "Your workspace has been forked into a separate entry that only you can modify, which you can find here",
zero: "0",
Zero or more of a: "零个a以上",
Zero or one of a: "零或一个a"
}